[{"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\index.js":"1","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\reportWebVitals.js":"2","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\App.js":"3","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\MenuComponent.js":"4","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\dishes.js":"5","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\MainComponent.js":"7","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\HeaderComponent.js":"8","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\FooterComponent.js":"9","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\HomeComponent.js":"10","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\ContactComponent.js":"11","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\leaders.js":"12","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\promotions.js":"13","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\comments.js":"14","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\AboutComponent.js":"15","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\configureStore.js":"16","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\promotions.js":"17","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\comments.js":"18","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\leaders.js":"19","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\dishes.js":"20","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\ActionTypes.js":"21","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\ActionCreators.js":"22","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\LoadingComponent.js":"23","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\forms.js":"24","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\baseUrl.js":"25"},{"size":631,"mtime":1611666944434,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":554,"mtime":1611684563294,"results":"29","hashOfConfig":"27"},{"size":2169,"mtime":1611851759334,"results":"30","hashOfConfig":"27"},{"size":1490,"mtime":1611747674607,"results":"31","hashOfConfig":"27"},{"size":7325,"mtime":1611859371848,"results":"32","hashOfConfig":"27"},{"size":3862,"mtime":1611861601663,"results":"33","hashOfConfig":"27"},{"size":5583,"mtime":1611747588300,"results":"34","hashOfConfig":"27"},{"size":2809,"mtime":1611593182003,"results":"35","hashOfConfig":"27"},{"size":1701,"mtime":1611852408635,"results":"36","hashOfConfig":"27"},{"size":10741,"mtime":1611765980796,"results":"37","hashOfConfig":"27"},{"size":2382,"mtime":1611747726541,"results":"38","hashOfConfig":"27"},{"size":445,"mtime":1611593182014,"results":"39","hashOfConfig":"27"},{"size":4279,"mtime":1611747705969,"results":"40","hashOfConfig":"27"},{"size":4407,"mtime":1611596073492,"results":"41","hashOfConfig":"27"},{"size":795,"mtime":1611765553399,"results":"42","hashOfConfig":"27"},{"size":627,"mtime":1611852879977,"results":"43","hashOfConfig":"27"},{"size":648,"mtime":1611859185262,"results":"44","hashOfConfig":"27"},{"size":182,"mtime":1611749433700,"results":"45","hashOfConfig":"27"},{"size":621,"mtime":1611851435559,"results":"46","hashOfConfig":"27"},{"size":411,"mtime":1611849630388,"results":"47","hashOfConfig":"27"},{"size":4540,"mtime":1611859643920,"results":"48","hashOfConfig":"27"},{"size":255,"mtime":1611763571588,"results":"49","hashOfConfig":"27"},{"size":169,"mtime":1611765444493,"results":"50","hashOfConfig":"27"},{"size":48,"mtime":1611849227686,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"pqylnq",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\index.js",[],["108","109"],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\reportWebVitals.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\App.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\MenuComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\dishes.js",[],["110","111"],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\DishdetailComponent.js",["112","113","114"],"import React, { Component } from 'react';\r\nimport {\r\n    Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem,\r\n    Button, Modal, ModalHeader, ModalBody, Label, Row, Col\r\n} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nconst maxLenght = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLenght = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    };\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.toggleModal();\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal isOpen={this.state.isModalOpen}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Label htmlFor=\"rating\">Rating</Label>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Control.select model=\".rating\" name=\"rating\"\r\n                                        className=\"form-control\" >\r\n                                        <option>1</option>\r\n                                        <option>2</option>\r\n                                        <option>3</option>\r\n                                        <option>4</option>\r\n                                        <option>5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Label htmlFor=\"author\">Your Name</Label>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            minLenght: minLenght(3), maxLenght: maxLenght(15)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLenght: 'Must be greater than 2 characters',\r\n                                            maxLenght: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Label htmlFor=\"comment\">Comment</Label>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                        rows=\"6\" className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n                <Button outline onClick={this.toggleModal}>\r\n                    <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nfunction RenderDish({ dish }) {\r\n    return (\r\n        <div className=\"col col-12 col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nfunction RenderComments({ comments, postComment, dishId }) {\r\n    if (comments != null && comments.length > 0) {\r\n        const com = comments.map((i) => {\r\n            const date = new Date(i.date);\r\n            const month = date.toLocaleString('default', { month: 'long' });\r\n            return (\r\n                <div key={i.id}>\r\n                    <li><p>{i.comment}</p></li>\r\n                    <li><p>--{i.author}, {month} {date.getDay()}, {date.getFullYear()}</p></li>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div className=\"col col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    {com}\r\n                </ul>\r\n                <CommentForm dishId={dishId} postComment={postComment} />\r\n            </div>);\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    if (props.isLoading) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if(props.errMess){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    if (props.dish != null) {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/menu'>Menu</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>\r\n                            {props.dish.name}\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments}\r\n                        postComment={props.postComment}\r\n                        dishId={props.dish.id}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <div></div>\r\n    }\r\n}\r\n\r\nexport default DishDetail;","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\MainComponent.js",["115"],"import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Menu from './MenuComponent';\r\nimport Contact from \"./ContactComponent\";\r\nimport About from \"./AboutComponent\";\r\nimport DishDetail from './DishdetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from \"./FooterComponent\";\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        dishes: state.dishes,\r\n        comments: state.comments,\r\n        promotions: state.promotions,\r\n        leaders: state.leaders\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    postComment: (dishId, rating, author, comment) =>\r\n        dispatch(postComment(dishId, rating, author, comment)),\r\n    fetchDishes: () => { dispatch(fetchDishes()) },\r\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback')) },\r\n    fetchComments: () => { dispatch(fetchComments()) },\r\n    fetchPromos: () => { dispatch(fetchPromos()) }\r\n})\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchDishes();\r\n        this.props.fetchComments();\r\n        this.props.fetchPromos();\r\n    }\r\n\r\n    render() {\r\n\r\n        const HomePage = () => {\r\n            return (\r\n                <Home dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n                    dishesLoading={this.props.dishes.isLoading}\r\n                    dishesErrMess={this.props.dishes.errMess}\r\n                    promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n                    promoLoading={this.props.promotions.isLoading}\r\n                    promoErrMess={this.props.promotions.errMess}\r\n                    leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n                />\r\n            );\r\n        }\r\n\r\n        const DishWithId = ({ match }) => {\r\n            return (\r\n                <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId, 10))[0]}\r\n                    isLoading={this.props.dishes.isLoading}\r\n                    errMess={this.props.dishes.errMess}\r\n                    comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId, 10))}\r\n                    commentsErrMess={this.props.comments.errMess}\r\n                    postComment={this.props.postComment}\r\n                />\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <TransitionGroup>\r\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300} >\r\n                        <Switch>\r\n                            <Route path=\"/home\" component={HomePage} />\r\n                            <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n                            <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n                            <Route exact path=\"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n                            <Route exact path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n                            <Redirect to=\"/home\" />\r\n                        </Switch>\r\n                    </CSSTransition>\r\n                </TransitionGroup >\r\n                <Footer />\r\n            </div >\r\n        );\r\n    }\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\HeaderComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\FooterComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\HomeComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\ContactComponent.js",["116","117","118","119","120","121","122","123","124"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Row, Label, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLenght = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLenght = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        console.log(\"Current state is: \" + JSON.stringify(values));\r\n        alert(\"Current state is: \" + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem>\r\n                            <Link to='/home'>Home</Link>\r\n                        </BreadcrumbItem>\r\n                        <BreadcrumbItem active>\r\n                            Contact us\r\n                        </BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact us</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us Your Feedback</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLenght: minLenght(3), maxLenght: maxLenght(15)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLenght: 'Must be greater than 2 characters',\r\n                                            maxLenght: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLenght: minLenght(3), maxLenght: maxLenght(15)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLenght: 'Must be greater than 2 characters',\r\n                                            maxLenght: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLenght: minLenght(3), maxLenght: maxLenght(15),\r\n                                            isNumber\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLenght: 'Must be greater than 2 numbers',\r\n                                            maxLenght: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 6, offset: 2 }}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\" />{' '}\r\n                                            <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{ size: 3, offset: 1 }}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\" >\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\" className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{ size: 10, offset: 2 }}>\r\n                                    <Button type=\"submit\" color=\"primary\">Send Feedback</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Contact;","C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\leaders.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\promotions.js",[],["125","126"],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\comments.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\AboutComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\configureStore.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\promotions.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\comments.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\leaders.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\dishes.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\ActionTypes.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\ActionCreators.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\components\\LoadingComponent.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\redux\\forms.js",[],"C:\\Users\\bigdickus\\Desktop\\react\\confuse\\src\\shared\\baseUrl.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":46,"column":37,"nodeType":"135","endLine":47,"endColumn":67},{"ruleId":"133","severity":1,"message":"136","line":59,"column":37,"nodeType":"135","endLine":64,"endColumn":46},{"ruleId":"133","severity":1,"message":"137","line":80,"column":37,"nodeType":"135","endLine":81,"endColumn":77},{"ruleId":"138","severity":1,"message":"139","line":34,"column":5,"nodeType":"140","messageId":"141","endLine":36,"endColumn":6},{"ruleId":"142","severity":1,"message":"143","line":4,"column":33,"nodeType":"144","messageId":"145","endLine":4,"endColumn":40},{"ruleId":"146","severity":1,"message":"147","line":63,"column":29,"nodeType":"135","endLine":63,"endColumn":71},{"ruleId":"133","severity":1,"message":"136","line":77,"column":37,"nodeType":"135","endLine":82,"endColumn":46},{"ruleId":"133","severity":1,"message":"136","line":98,"column":37,"nodeType":"135","endLine":103,"endColumn":46},{"ruleId":"133","severity":1,"message":"136","line":119,"column":37,"nodeType":"135","endLine":125,"endColumn":46},{"ruleId":"133","severity":1,"message":"136","line":142,"column":37,"nodeType":"135","endLine":147,"endColumn":46},{"ruleId":"133","severity":1,"message":"148","line":163,"column":45,"nodeType":"135","endLine":164,"endColumn":80},{"ruleId":"133","severity":1,"message":"134","line":170,"column":37,"nodeType":"135","endLine":171,"endColumn":67},{"ruleId":"133","severity":1,"message":"137","line":180,"column":37,"nodeType":"135","endLine":181,"endColumn":78},{"ruleId":"127","replacedBy":"149"},{"ruleId":"129","replacedBy":"150"},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],["151"],["152"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["151"],["152"],"no-global-assign","no-unsafe-negation"]